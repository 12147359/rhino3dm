// NATIVE ENUMS
// Automatically generated enums from C++ libraries.
// DO NOT EDIT THIS FILE BY HAND!

#define ON_ENUM_SENTINEL_VALUES_RHINOCOMMON_REGION

#region opennurbs_compstat.h

// line 25: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_compstat.h
namespace Rhino.Geometry
{

///<summary><para>Provides a set of values describing component state.</para>
///<para>This is not a bit field.</para>
///<para>Some of these values are mutually exclusive and should not be combined.</para></summary>
internal enum ComponentState : byte 
{
  ///<summary>Not a valid status.</summary>
  Unset = 0,

  ///<summary>This is a default component state.</summary>
  Clear = 1,

  ///<summary>This is a default component state, but not selected.</summary>
  NotSelected = 2,

  ///<summary>This component is selected.</summary>
  Selected = 3,

  ///<summary>This component is selected persistently.</summary>
  SelectedPersistent = 4,

  ///<summary>This is a default component state, but not highlighted.</summary>
  NotHighlighted = 5,

  ///<summary>This component is highlighted.</summary>
  Highlighted = 6,

  ///<summary>This is a default component state, but not hidden.</summary>
  NotHidden = 7,

  ///<summary>This component is hidden.</summary>
  Hidden = 8,

  ///<summary>This is a default component state, but not locked.</summary>
  NotLocked = 9,

  ///<summary>This component is locked.</summary>
  Locked = 10,

  ///<summary>This is a default component state, but not damaged.</summary>
  NotDamaged = 11,

  ///<summary>This component is damaged.</summary>
  Damaged = 12,

  ///<summary>This component is not deleted.</summary>
  NotDeleted = 13,

  ///<summary>This component is deleted.</summary>
  Deleted = 14,

  ///<summary>This runtime mark is clear.</summary>
  RuntimeMarkClear = 15,

  ///<summary>This runtime mark is set.</summary>
  RuntimeMarkSet = 16
}
}

#endregion

#region opennurbs_defines.h

// line 932: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_defines.h
namespace Rhino
{
  /////////////////////////////////////////////////////////////////
  /// <summary>
  /// ON::RuntimeEnvironment identifies a runtime environment (operating system).
  /// This value is saved in binary archives so appropriate adjustments
  /// to resources provided by runtime environments, like fonts, can be made
  /// when an archive created in one runtime environment is used in another.
  /// </summary>
  public enum RuntimeEnvironment : byte 
  {
    ///<summary>
    /// ON::RuntimeEnvironment::Unset indicates no runtime is set.
    ///</summary>
    Unset =  0, 

    ///<summary>
    /// ON::RuntimeEnvironment::None indicates no runtime.
    /// This is a different condition from ON::Runtime::Unset. 
    ///</summary>
    None = 1,

    ///<summary>
    /// ON::RuntimeEnvironment::Windows indicates some version of Microsoft Windows.
    ///</summary>
    Windows = 2,

    ///<summary>
    /// ON::RuntimeEnvironment::Apple indicates some version of Apple OS X or iOS.
    ///</summary>
    Apple = 3,

    ///<summary>
    /// ON::RuntimeEnvironment::Android indicates some version of Google Android.
    ///</summary>
    Android =  4,

    ///<summary>
    /// ON::RuntimeEnvironment::Linux indicates some version of Linux.
    ///</summary>
    Linux = 5
  }
}

// line 986: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_defines.h
namespace Rhino
{
  /// <summary>
  /// ON::ReadFileResult reports what happened when a file read was attempted.
  /// </summary>
  public enum ReadFileResult : byte 
  {
    ///<summary>
    /// No result is available.
    ///</summary>
    Unset = 0,

    ///<summary>
    /// Read completed with no errors.
    ///</summary>
    Completed = 1,

    ///<summary>
    /// Read completed with non fatal errors.
    ///</summary>
    CompletedWithErrors = 2,

    ///<summary>
    /// Read failed.
    ///</summary>
    Failed = 3
  }
}

// line 1047: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_defines.h
namespace Rhino
{
  //   unit_system ///////////////////////////////////////////////////////////////
  /// <summary>
  /// ON::LengthUnitSystem identifies a length unit system
  /// United States customary length units references:
  ///   http://www.nist.gov/pml/wmd/metric/upload/frn-59-5442-1959.pdf
  ///   http://en.wikipedia.org/wiki/United_States_customary_units
  ///   http://en.wikipedia.org/wiki/International_yard_and_pound
  /// </summary>
  public enum UnitSystem : byte 
  {
    ///<summary>
    /// ON::LengthUnitSystem::None indicates no length unit system. The scale factor
    /// when converting between a specified unit system and None is always 1.0.
    /// ON::LengthUnitSystem::None is used as a unit system for models and
    /// instance defitions that should be imported or referenced with no
    /// scaling applied.
    ///</summary>
    None =  0, 

    ///<summary>
    /// 1 angstroms = 1.0e-10 meters
    ///</summary>
    Angstroms = 12,

    // SI (metric) units

    ///<summary>
    /// 1 nanometer = 1.0e-9 meters
    ///</summary>
    Nanometers = 13,

    ///<summary>
    /// 1 micron = 1.0e-6 meters
    ///</summary>
    Microns =  1,
    
    ///<summary>
    /// 1 millimeter = 1.0e-3 meters
    ///</summary>
    Millimeters =  2,
    
    ///<summary>
    /// 1 centimeter = 1.0e-2 meters
    ///</summary>
    Centimeters =  3,
    
    ///<summary>
    /// 1 decimeter = 1.0e-1 meters
    ///</summary>
    Decimeters = 14,

    ///<summary>
    /// SI meter length unit
    ///</summary>
    Meters =  4,

    ///<summary>
    /// 1 dekameter = 1.0e+1 meters
    ///</summary>
    Dekameters = 15,  // 1.0e+1 meters

    ///<summary>
    /// 1 hectometer = 1.0e+2 meters
    ///</summary>
    Hectometers = 16,

    ///<summary>
    /// 1 kilometer = 1.0e+3 meters
    ///</summary>
    Kilometers =  5,

    ///<summary>
    /// 1 megameter = 1.0e+6 meters
    ///</summary>
    Megameters = 17,

    ///<summary>
    /// 1 gigameter = 1.0e+9 meters
    ///</summary>
    Gigameters = 18,

    ///<summary>
    /// 1 microinches = 2.54e-8 meters = 1.0e-6 inches
    ///</summary>
    Microinches =  6,

    ///<summary>
    /// 1 mil = 2.54e-5 meters = 0.001 inches
    ///</summary>
    Mils =  7,
    
    ///<summary>
    /// 1 inch = 0.0254 meters = 1/12 foot
    ///</summary>
    Inches =  8,
    
    ///<summary>
    /// 1 foot = 0.3048  meters (12 inches)
    ///</summary>
    Feet =  9,
    
    ///<summary>
    /// 1 foot = 0.3048 meters = 12 inches
    ///</summary>
    Yards = 19,
    
    ///<summary>
    /// 1 US statute mile = 1609.344 meters = 5280 feet
    ///</summary>
    Miles = 10,

    ///<summary>
    /// 1 printer point = 1/72 inch
    ///</summary>
    PrinterPoints = 20,
    
    ///<summary>
    /// 1 printer pica = 1/6 inch
    ///</summary>
    PrinterPicas = 21,

    // terrestrial distances

    ///<summary>
    /// 1 nautical mile = 1852 meters
    /// Approximately 1 minute of arc on a terrestrial great circle.
    /// Reference: http://en.wikipedia.org/wiki/Nautical_mile
    ///</summary>
    NauticalMiles = 22,

    // astronomical distances

    ///<summary>
    /// 1 astronomical unit = 1.4959787e+11 meters
    /// An astronomical unit (au) is the mean distance from the 
    /// center of the earth to the center of the sun.
    /// References:
    ///   http://en.wikipedia.org/wiki/Astronomical_unit (1.4959787e+11 meters)
    ///   http://units.nist.gov/Pubs/SP811/appenB9.htm (1.495979e+11 meters)
    ///</summary>
    AstronomicalUnits = 23,

    ///<summary>
    /// 1 light year = 9.4607304725808e+15 meters
    /// A light year is the distance light travels in one Julian year.
    ///    The speed of light is exactly 299792458 meters/second.
    ///    A Julian year is exactly 365.25 * 86400 seconds and is 
    ///    approximately the time it takes for one earth orbit.
    /// References: 
    ///   http://en.wikipedia.org/wiki/Light_year (9.4607304725808e+15 meters)
    ///   http://units.nist.gov/Pubs/SP811/appenB9.htm (9.46073e+15 meters)
    ///</summary>
    LightYears = 24,     

    ///<summary>
    /// 1 parsec = 3.08567758e+16 meters
    /// References: 
    ///   http://en.wikipedia.org/wiki/Parsec (3.08567758e+16 meters)
    ///   http://units.nist.gov/Pubs/SP811/appenB9.htm (3.085678e+16)
    ///</summary>
    Parsecs = 25,

    ///<summary>
    /// The name of a custom unit and the conversion to meters
    /// are saved in the ON_UnitSystem class.
    ///</summary>
    CustomUnits = 11,

    ///<summary>
    /// The ON::LengthUnitSystem::Unset is used to indicate no unit system is set.
    /// This is a differnt condition from ON::LengthUnitSystem::None. 
    ///</summary>
    Unset = 255
  }
}

// line 1380: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_defines.h
namespace Rhino
{
  /// <summary>
  /// ON::AngleUnitSystem identifies an angle unit system
  /// </summary>
  public enum AngleUnitSystem : byte 
  {
    ///<summary>
    /// ON::AngleUnitSystem::None indicates no angle unit system
    /// is specified and model angle unit system should be used.
    ///</summary>
    None = 0,

    ///<summary>
    /// 1 turn = 2pi radians. 
    ///</summary>
    Turns = 1,

    ///<summary>
    /// 1 turn = 2pi radians. 
    ///</summary>
    Radians = 2, // 2pi radians = 1 turn

    ///<summary>
    /// 360 arc degrees  = 1 turn = 2pi radians 
    ///</summary>
    Degrees = 3,

    ///<summary>
    /// 60 arc minutes = 1 arc degree
    ///</summary>
    Minutes = 4,

    ///<summary>
    /// 60 arc seconds = 1 arc minute
    ///</summary>
    Seconds = 5,

    ///<summary>
    /// 400 gradians = 2pi radians. 
    ///</summary>
    Gradians = 6,

    ///<summary>
    /// The ON::AngleUnitSystem::Unset is used to indicates no angle unit system 
    /// has been specified in user interface code.
    ///</summary>
    Unset = 255
  }
}

// line 2101: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_defines.h
namespace Rhino.Geometry
{

  /// <summary>
  /// ON::AnnotationType identifies the type of an annotation object derived from ON_Annotation.
  /// </summary>
  public enum AnnotationType : byte 
  {
    ///<summary>
    /// Not a valid annotation type.
    ///</summary>
    Unset = 0,

    ///<summary>
    /// Linear distance between two points with dimension line parallel to the dimensioned points.
    ///</summary>
    Aligned = 1,

    ///<summary>
    /// Angle bewteen two lines.
    ///</summary>
    Angular = 2,

    ///<summary>
    /// Arc or circle diameter dimension.
    ///</summary>
    Diameter = 3,

    ///<summary>
    /// Arc or circle radius dimension.
    ///</summary>
    Radius = 4,

    ///<summary>
    /// Linear distance between two points with dimension line horizontal, vertical or rotated by a specified amount.
    ///</summary>
    Rotated = 5,

    ///<summary>
    /// Ordinate dimension. Typically used to document an offset distance between the center of a circle and a reference point.
    ///</summary>
    Ordinate = 6,

    ///<summary>
    /// Arc length of a curve.
    ///</summary>
    ArcLen = 7,

    ///<summary>
    /// Center mark dimension. Typically used to document the center of an arc or circle.
    ///</summary>
    CenterMark = 8,

    ///<summary>
    /// Text. Stand alone text with a wide variety of uses.
    ///</summary>
    Text = 9,

    ///<summary>
    /// Leader. Text and a curve with an arrow head.
    ///</summary>
    Leader = 10,

    ///<summary>
    /// Angular3pt. Angle defined by 3 points.
    ///</summary>
    Angular3pt = 11
  }
}

// line 2177: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_defines.h
namespace Rhino.DocObjects
{
  /// <summary>
  /// Vertical location of text attach point relative to text
  /// </summary>
  public enum TextVerticalAlignment : byte 
  {
    ///<summary>
    /// Attach to top of an "I" on the first line. (Independent of glyphs being displayed.)
    ///</summary>
    Top = 0,
    ///<summary>
    /// Attach to middle of an "I" on the first line. (Independent of glyphs being displayed.)
    ///</summary>
    MiddleOfTop = 1,
    ///<summary>
    /// Attach to baseline of first line. (Independent of glyphs being displayed.)
    ///</summary>
    BottomOfTop = 2,
    ///<summary>
    /// Attach to middle of text vertical advance. (Independent of glyphs being displayed.)
    ///</summary>
    Middle = 3,
    ///<summary>
    /// Attach to middle of an "I" on the last line. (Independent of glyphs being displayed.)
    ///</summary>
    MiddleOfBottom = 4,
    ///<summary>
    /// Attach to the basline of the last line. (Independent of glyphs being displayed.)
    ///</summary>
    Bottom = 5,
    ///<summary>
    /// Attach to the bottom of the boudning box of the visible glyphs.
    ///</summary>
    BottomOfBoundingBox = 6, // TODO - changed to BottomOfBoundingBox
  }
}

// line 2222: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_defines.h
namespace Rhino.DocObjects
{
  /// <summary>
  /// Horizontal location of text attach point relative to text
  /// </summary>
  public enum TextHorizontalAlignment : byte 
  {
    /// <summary>
    /// Attach at left of text lines (Independent of glyphs being displayed.)
    /// </summary>
    Left = 0,
    /// <summary>
    /// Attach point at center of text horizontal advance (not glyph bounding box)
    /// </summary>
    Center = 1,
    /// <summary>
    /// Attach point at right text horizontal advance (not glyph bounding box)
    /// </summary>
    Right = 2,
  }
}

// line 2251: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_defines.h
namespace Rhino.DocObjects
{
  /// <summary>
  /// Method for getting rotation for drawing text
  /// </summary>
  public enum TextOrientation : byte 
  {
    /// <summary>
    /// Text has fixed rotation on a world coordinate plane
    /// </summary>
    InPlane = 0,
    /// <summary>
    /// Text is drawn on a plane perpendicular to view direction horizontal to the screen
    /// </summary>
    InView = 1,
  }
}

#endregion

#region opennurbs_dimension.h

// line 29: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimension.h
namespace Rhino.Geometry
{
  partial class Dimension
  {
  /// <summary>
  /// Arrowheads forced Inside, or Outside of extension lines, or moved to fit.
  /// </summary>
  public enum ForceArrow : int 
  {
    /// <summary> </summary>
    Auto = 0,
    /// <summary> </summary>
    Inside = 1,
    /// <summary> </summary>
    Outside = 2,
  }
  }
}

// line 47: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimension.h
namespace Rhino.Geometry
{
  partial class Dimension
  {
  /// <summary>
  /// Text forced Inside, Right or Left of extension lines, or moved to fit (Auto).
  /// </summary>
  public enum ForceText : int 
  {
    /// <summary> </summary>
    Auto = 0,
    /// <summary> </summary>
    Inside = 1,
    /// <summary> </summary>
    Right = 2,
    /// <summary> </summary>
    Left = 3,
    /// <summary> If override isn't specified and text doesn't fit, move it right </summary>
    HintRight = 4,
    /// <summary> If override isn't specified and text doesn't fit, move it left </summary>
    HintLeft = 5,
  }
  }
}

// line 884: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimension.h
namespace Rhino.Geometry
{
  partial class OrdinateDimension
  {
  /// <summary>
  /// Ordinate dimension measures x or y direction
  /// </summary>
  public enum MeasuredDirection : byte 
  {
    /// <summary> </summary>
    Unset = 0,
    /// <summary> Measures horizontal distance </summary>
    Xaxis = 1,
    /// <summary> Measures vertical distance </summary>
    Yaxis = 2,
  }
  }
}

#endregion

#region opennurbs_dimensionstyle.h

// line 33: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimensionstyle.h
namespace Rhino.DocObjects
{
  partial class DimensionStyle
  {
  /// <summary>
  /// Defines enumerated values for arrowhead shapes.
  /// </summary>
  public enum ArrowType : int 
  {
    /// <summary> </summary>
    None = 0,
    /// <summary> </summary>
    UserBlock = 1,
    /// <summary> </summary>
    SolidTriangle = 2,   // 2:1
    /// <summary> </summary>
    Dot = 3,
    /// <summary> </summary>
    Tick = 4,
    /// <summary> </summary>
    ShortTriangle = 5,   // 1:1
    /// <summary> </summary>
    OpenArrow = 6,
    /// <summary> </summary>
    Rectangle = 7,
    /// <summary> </summary>
    LongTriangle = 8,   // 4:1
    /// <summary> </summary>
    LongerTriangle = 9,   // 6:1
  }
  }
}

// line 99: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimensionstyle.h
namespace Rhino.DocObjects
{
  partial class DimensionStyle
  {
  /// <summary>
  /// Text mask drawn with background color or explicit color
  /// </summary>
  public enum MaskType : byte 
  {
    /// <summary>
    /// Text mask drawn with background color
    /// </summary>
    BackgroundColor = 0,
    /// <summary>
    /// Text mask drawn with explicit color
    /// </summary>
    MaskColor = 1,
  }
  }
}

// line 441: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimensionstyle.h
namespace Rhino.DocObjects
{
  partial class DimensionStyle
  {
  /// <summary>
  /// Dimension display length unit system and style
  /// </summary>
  public enum LengthDisplay : int 
  {
    /// <summary>
    /// Decimal current model units
    /// </summary>
    ModelUnits = 0,

    /// <summary>
    /// Decimal Millimeters
    /// </summary>
    Millmeters = 3,

    /// <summary>
    /// Decimal Centimeters
    /// </summary>
    Centimeters = 4,

    /// <summary>
    /// Decimal Meters
    /// </summary>
    Meters = 5,

    /// <summary>
    /// Decimal Kilometers
    /// </summary>
    Kilometers = 6,

    /// <summary>
    /// Decimal Inches
    /// </summary>
    InchesDecimal = 7,

    /// <summary>
    /// Fractional Inches ( 1.75 inches displays as 1-3/4 )
    /// </summary>
    InchesFractional = 1,

    /// <summary>
    /// Decimal Feet
    /// </summary>
    FeetDecimal = 8,

    /// <summary>
    /// Feet and Inches ( 14.75 inches displays as 1&apos;-2-3/4&quot; )
    /// </summary>
    FeetAndInches = 2,

    /// <summary>
    /// Decimal Miles
    /// </summary>
    Miles = 9
  }
  }
}

// line 519: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimensionstyle.h
namespace Rhino.DocObjects
{
  partial class DimensionStyle
  {
  /// <summary>
  /// Style of tolerance display for dimensions
  /// </summary>
  public enum ToleranceDisplayFormat : byte 
  {
    /// <summary>
    /// No tolerance display
    /// </summary>
    None = 0,
    /// <summary>
    /// Symmetrical +/- tolerance
    /// </summary>
    Symmetrical = 1,
    /// <summary>
    /// Distance +tol, -tol
    /// </summary>
    Deviation = 2,
    /// <summary>
    /// Distance upper and lower limits
    /// </summary>
    Limits = 3,
  }
  }
}

// line 549: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimensionstyle.h
namespace Rhino.DocObjects
{
  partial class DimensionStyle
  {
  /// <summary>
  /// Angle for text or other leader or dimension content
  /// </summary>
  public enum LeaderContentAngleStyle : byte 
  {
    /// <summary>
    /// Annotation text is horizontal in annotation object's plane
    /// </summary>
    Horizontal = 0,   
    /// <summary>
    /// Aligned with last leader direction or dimension line
    /// </summary>
    Aligned = 1,   
    /// <summary>
    /// Explicit angle
    /// </summary>
    Rotated = 2,
  }
  }
}

// line 574: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimensionstyle.h
namespace Rhino.DocObjects
{
  partial class DimensionStyle
  {
  /// <summary>
  /// Type of leader curve
  /// </summary>
  public enum LeaderCurveStyle : byte 
  {
    /// <summary>
    ///
    /// </summary>
    None = 0,
    /// <summary>
    ///
    /// </summary>
    Polyline = 1,
    /// <summary>
    ///
    /// </summary>
    Spline = 2
  }
  }
}

// line 599: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimensionstyle.h
namespace Rhino.DocObjects
{
  partial class DimensionStyle
  {
  // Don't change these enum values. They are used in file reading and writing.
  /// <summary>
  /// Field identifiers used for file i/o and getting/setting values
  /// </summary>
  public enum Field : int 
  {
    /// <summary></summary>
    Unset                          = 0,

    /// <summary>Dimension style Name property. Cannot be inherited from parent.</summary>
    Name                           = 1,

    /// <summary>Dimension style runtime model component index property. Cannot be inherited from parent.</summary>
    Index                          = 2,

    /// <summary></summary>
    ExtensionLineExtension         = 3,
    /// <summary></summary>
    ExtensionLineOffset            = 4,
    /// <summary></summary>
    Arrowsize                      = 5,
    /// <summary></summary>
    LeaderArrowsize                = 6,
    /// <summary></summary>
    Centermark                     = 7,
    /// <summary></summary>
    TextGap                        = 8,
    /// <summary></summary>
    TextHeight                     = 9,
    /// <summary>Linear, angular, and ordinate dimension text location above/in/below</summary>
    DimTextLocation                = 10,
 
     //OBSOLETE_LengthFormat_                   = 11,

    /// <summary></summary>
    LengthResolution               = 12,
    /// <summary></summary>
    AngleFormat                    = 13,
    /// <summary></summary>
    AngleResolution                = 14,
    /// <summary></summary>
    Font                           = 15,
    
    /// <summary>
    /// LengthFactor is a rarely used. It applies when a model is being
    /// drawn to a scale and the dimension length values should be
    /// reverse scaled. For example, if a model is drawn at 1/4 scale,
    /// a line 5 units long indicates the real world line is 20 units
    /// long. In this case setting LengthFactor to 4 would cause
    /// a linear dimension applied to that line to display a value of 20.
    ///</summary>
    LengthFactor                   = 16,

    /// <summary></summary>
    Alternate                      = 17,

    /// <summary>
    /// AlternateLengthFactor is a rarely used. See Length factor for
    /// a discription of this property.
    ///</summary>
    AlternateLengthFactor          = 18,

    //OBSOLETE_AlternateLengthFormat_          = 19,

    /// <summary></summary>
    AlternateLengthResolution      = 20,
    /// <summary></summary>
    Prefix                         = 21,
    /// <summary></summary>
    Suffix                         = 22,
    /// <summary></summary>
    AlternatePrefix                = 23,
    /// <summary></summary>
    AlternateSuffix                = 24,
    /// <summary></summary>
    DimensionLineExtension         = 25,
    /// <summary></summary>
    SuppressExtension1             = 26,
    /// <summary></summary>
    SuppressExtension2             = 27,
    /// <summary></summary>
    ExtLineColorSource             = 28,
    /// <summary></summary>
    DimLineColorSource             = 29,
    /// <summary></summary>
    ArrowColorSource               = 30,
    /// <summary></summary>
    TextColorSource                = 31,
    /// <summary></summary>
    ExtLineColor                   = 32,
    /// <summary></summary>
    DimLineColor                   = 33,
    /// <summary></summary>
    ArrowColor                     = 34,
    /// <summary></summary>
    TextColor                      = 35,
    /// <summary></summary>
    ExtLinePlotColorSource         = 36,
    /// <summary></summary>
    DimLinePlotColorSource         = 37,
    /// <summary></summary>
    ArrowPlotColorSource           = 38,
    /// <summary></summary>
    TextPlotColorSource            = 39,
    /// <summary></summary>
    ExtLinePlotColor               = 40,
    /// <summary></summary>
    DimLinePlotColor               = 41,
    /// <summary></summary>
    ArrowPlotColor                 = 42,
    /// <summary></summary>
    TextPlotColor                  = 43,
    /// <summary></summary>
    ExtLinePlotWeightSource        = 44,
    /// <summary></summary>
    DimLinePlotWeightSource        = 45,
    /// <summary></summary>
    ExtLinePlotWeight_mm           = 46,
    /// <summary></summary>
    DimLinePlotWeight_mm           = 47,
    /// <summary></summary>
    ToleranceFormat                = 48,
    /// <summary></summary>
    ToleranceResolution            = 49,
    /// <summary></summary>
    ToleranceUpperValue            = 50,
    /// <summary></summary>
    ToleranceLowerValue            = 51,
    /// <summary></summary>
    AltToleranceResolution         = 52,
    /// <summary></summary>
    ToleranceHeightScale           = 53,
    /// <summary></summary>
    BaselineSpacing                = 54,
    /// <summary></summary>
    DrawMask                       = 55,
    /// <summary></summary>
    MaskColorSource                = 56,
    /// <summary></summary>
    MaskColor                      = 57,
    /// <summary></summary>
    MaskBorder                     = 58,
    /// <summary></summary>
    DimensionScale                 = 59,
    /// <summary></summary>
    DimscaleSource                 = 60,
    /// <summary></summary>
    FixedExtensionLength           = 61,
    /// <summary></summary>
    FixedExtensionOn               = 62,
    /// <summary></summary>
    TextRotation                   = 63,
    /// <summary></summary>
    SuppressArrow1                 = 64,
    /// <summary></summary>
    SuppressArrow2                 = 65,
    /// <summary></summary>
    TextmoveLeader                 = 66,
    /// <summary></summary>
    ArclengthSymbol                = 67,
    /// <summary></summary>
    StackTextheightScale           = 68,
    /// <summary></summary>
    StackFormat                    = 69,
    /// <summary></summary>
    AltRound                       = 70,
    /// <summary></summary>
    Round                          = 71,
    /// <summary></summary>
    AngularRound                   = 72,
    /// <summary></summary>
    AltZeroSuppress                = 73,

    //OBSOLETE ToleranceZeroSuppress          = 74,

    /// <summary></summary>
    AngleZeroSuppress              = 75,
    /// <summary></summary>
    ZeroSuppress                   = 76,
    /// <summary></summary>
    AltBelow                       = 77,
    /// <summary></summary>
    ArrowType1                     = 78,
    /// <summary></summary>
    ArrowType2                     = 79,
    /// <summary></summary>
    LeaderArrowType                = 80,
    /// <summary></summary>
    ArrowBlockId1                  = 81,
    /// <summary></summary>
    ArrowBlockId2                  = 82,
    /// <summary></summary>
    LeaderArrowBlock               = 83,
    /// <summary>Radial dimension text location above/in/below</summary>
    DimRadialTextLocation          = 84,
    /// <summary></summary>
    TextVerticalAlignment          = 85,
    /// <summary></summary>
    LeaderTextVerticalAlignment    = 86,
    /// <summary></summary>
    LeaderContentAngleStyle        = 87,
    /// <summary></summary>
    LeaderCurveType                = 88,
    /// <summary></summary>
    LeaderContentAngle             = 89,
    /// <summary></summary>
    LeaderHasLanding               = 90,
    /// <summary></summary>
    LeaderLandingLength            = 91,
    /// <summary></summary>
    MaskFlags                      = 92,
    /// <summary></summary>
    CentermarkStyle                = 93,
    /// <summary></summary>
    TextHorizontalAlignment        = 94,
    /// <summary></summary>
    LeaderTextHorizontalAlignment  = 95,
    /// <summary></summary>
    DrawForward                    = 96,
    /// <summary></summary>
    SignedOrdinate                 = 97,
    
    /// <summary>
    /// Unit system for dimension rendering sizes like  TextHeight, TextGap, ArrowSize, ExtOffset,
    /// and dozens of other properties that control the appearance and placement of the components
    /// used to render a dimension.
    ///</summary>
    UnitSystem                     = 98,

    /// <summary></summary>
    TextMask                       = 99,
    /// <summary></summary>
    TextOrientation                = 100,
    /// <summary></summary>        
    LeaderTextOrientation          = 101,
    /// <summary></summary>
    DimTextOrientation             = 102,
    /// <summary></summary>
    DimRadialTextOrientation       = 103,
    /// <summary></summary>
    DimTextAngleStyle              = 104,
    /// <summary></summary>
    DimRadialTextAngleStyle        = 105,
    /// <summary></summary>
    TextUnderlined                 = 106,

    //OBSOLETE_DimensionUnitSystem_            = 107,
    //OBSOLETE_AlternateDimensionUnitSystem_   = 108,

    /// <summary>
    /// Dimension length display. See ON_DimStyle::DimensionLengthDisplay() for a descpription of this parameter.
    /// </summary>
    DimensionLengthDisplay = 109,

    /// <summary>
    /// Alternate dimension length display. See ON_DimStyle::AlternateDimensionLengthDisplay() for a descpription of this parameter.
    /// </summary>
    AlternateDimensionLengthDisplay = 110,

    /// <summary>Every enum UINT value that identifies a valid dimension style property is less than the UINT value of Count.</summary>
    Count = 111
  }
  }
}

// line 876: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimensionstyle.h
namespace Rhino.DocObjects
{
  partial class DimensionStyle
  {
  /// <summary>
  /// Display format for angles
  /// </summary>
  public enum AngleDisplayFormat : byte 
  {
    /// <summary> Decimal Degrees </summary>
    DecimalDegrees   = 0,
    /// <summary> Degrees Minutes Seconds </summary>
    DegMinSec        = 1,
    /// <summary> Decimal Radians </summary>
    Radians          = 2,
    /// <summary> Decimal Gradians </summary>
    Grads            = 3
  }
  }
}

// line 897: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimensionstyle.h
namespace Rhino.DocObjects
{
  partial class DimensionStyle
  {
  /// <summary>
  /// Obsolete format for length display - use ON_DimStyle::DimensionLengthDisplay instead
  /// </summary>
  public enum LengthDisplayFormat : byte 
  {
    /// <summary>Obsolete - use ON_DimStyle::DimensionLengthDisplay::ModelUnits.</summary>
    Decimal       = 0,

    /// <summary>Obsolete - use ON_DimStyle::DimensionLengthDisplay::InchesFractional</summary>
    Fractional    = 1,

    /// <summary>Obsolete - use ON_DimStyle::DimensionLengthDisplay::FeetAndInches</summary>
    FeetInches = 2,

    /// <summary>Obsolete - use ON_DimStyle::DimensionLengthDisplay::FeetAndInches enum.</summary>
    FeetDecimalInches = 3
  }
  }
}

// line 939: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimensionstyle.h
namespace Rhino.DocObjects
{
  partial class DimensionStyle
  {
  /// <summary>
  /// The location of text in linear, angular, radial, and ordinate dimensions.
  /// </summary>
  public enum TextLocation : byte 
  {
    /// <summary>Text is above dimension line.</summary>
    AboveDimLine = 0,
    /// <summary>Text is centered in dimension line.</summary>
    InDimLine = 1,
    /// <summary>Text is below dimension line.</summary>
    BelowDimLine = 2
  }
  }
}

// line 969: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimensionstyle.h
namespace Rhino.DocObjects
{
  partial class DimensionStyle
  {
  /// <summary>
  /// Marks leading and trailing zeros for removal.
  /// </summary>
  public enum ZeroSuppression : byte 
  {
    /// <summary>No zero suppression.</summary>
    None                          = 0,
    /// <summary>Suppress leading zeros.</summary>
    SuppressLeading               = 1,
    /// <summary>Suppress trailing zeros.</summary>
    SuppressTrailing              = 2,
    /// <summary>Suppress leading and trailing zeros.</summary>
    SuppressLeadingAndTrailing    = 3,
    /// <summary>Suppress zero feet.</summary>
    SuppressZeroFeet              = 4,
    /// <summary>Suppress zero inches.</summary>
    SuppressZeroInches            = 8,
    /// <summary>Suppress zero feet and zero inches.</summary>
    SuppressZeroFeetAndZeroInches = 12
  }
  }
}

// line 996: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimensionstyle.h
namespace Rhino.DocObjects
{
  partial class DimensionStyle
  {
  /// <summary>
  /// Format of stacked fractions
  /// </summary>
  public enum StackDisplayFormat : byte 
  {
    /// <summary> No stacking </summary>
    None               = 0,
    /// <summary> Stack with horizontal line </summary>
    StackHorizontal    = 1,
    /// <summary> Stack with angled line </summary>
    StackDiagonal      = 2,
  }
  }
}

// line 1015: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_dimensionstyle.h
namespace Rhino.DocObjects
{
  partial class DimensionStyle
  {
  /// <summary>
  /// Style for drawing centermark for Radial dimensions and Centermark objects
  /// </summary>
  public enum CenterMarkStyle : byte 
  {
    /// <summary>
    /// No centermark display
    /// </summary>
    None = 0,
    /// <summary>
    /// + mark only
    /// </summary>
    Mark = 1,
    /// <summary>
    /// + mark and lines to radius
    /// </summary>
    MarkAndLines = 2,
  }
  }
}

#endregion

#region opennurbs_file_utilities.h

// line 1240: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_file_utilities.h
namespace Rhino.FileIO
{
  ///<summary>Enumerates a list of file statuses.</summary>
  public enum FileReferenceStatus : int 
  {
    /// <summary>
    /// Status of a the full path is not known.
    /// </summary>
    Unknown = 0,

    /// <summary>
    /// Full path is valid.
    /// </summary>
    FullPathValid = 1,

    /// <summary>
    /// Unable to locate file.
    /// </summary>
    FileNotFound = 2 
  }
}

// line 1288: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_file_utilities.h
namespace Rhino.FileIO
{
  ///<summary>Defines options for file search.</summary>
  public enum FileFindPreference : int 
  {
    ///<summary>The choice is not defined.</summary>
    None = 0,

    ///<summary>File name exists in FullPath().</summary>
    FullPath = 1,

    ///<summary>File name exists in base path + RelativePath().</summary>
    RelativePath = 2,

    ///<summary>File name exists in base path directory.</summary>
    BasePath = 3,

    ///<summary>File with mathing content exists.</summary>
    ContentMatch = 4,

    ///<summary>Most recently modifed file.</summary>
    MostRecent = 5
  }
}

#endregion

#region opennurbs_font.h

// line 2277: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_font.h
namespace Rhino.DocObjects
{
  partial class Font
  {
  /// <summary>
  /// Platform where font originated. This information is useful when 
  /// searching for appropriate substitues.
  /// </summary>
  public enum FontOrigin : byte 
  {
    /// <summary> Not set. </summary>
    Unset = 0,

    /// <summary> Origin unknown. Changing an ON_Font characteristic like weight or sytle sets the origin to unknown. </summary>
    Unknown = 1,

    /// <summary> 
    /// Set from a Windows IDWriteFont by ON_Font::SetFromDWriteFont() 
    /// or a Windows LOGFONT by ON_Font::SetFromWindowsLogFont() and
    /// FaceName and WindowLogfontName match a font installed on a Windows device.
    /// </summary>
    WindowsFont = 2,

    /// <summary> 
    /// Set from an Apple CTFont. The PostScriptName() and FamilyName() match a
    /// font installed on device running MacOS or iOS. The FaceName() matches
    /// the "typeface" name shonw in the MacOS FontBook app.
    /// </summary>
    AppleFont = 3
  }
  }
}

// line 2306: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_font.h
namespace Rhino.DocObjects
{
  partial class Font
  {
  /// <summary>
  /// An enum that reports if the font face is avaialable on the current device.
  /// </summary>
  public enum FontType : byte 
  {
    /// <summary> Not set. </summary>
    Unset = 0,

    /// <summary> 
    /// In the managed font list.
    /// </summary>
    ManagedFont = 1,

    /// <summary> 
    /// In the installed font list.
    /// </summary>
    InstalledFont = 2
  }
  }
}

// line 2327: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_font.h
namespace Rhino.DocObjects
{
  partial class Font
  {
  /// <summary>
  /// Weight enum values
  /// Avoid casting these values to int.
  /// Use ON_Font::WindowsLogfontWeightFromWeight() or
  /// ON_Font::AppleWeightOfFontFromWeight() or
  /// add another converter.
  /// </summary>
  public enum FontWeight : byte 
  {
    /// <summary> Not set. </summary>
    Unset = 0,

    /// <summary> IsLight = true </summary>
    Thin = 1,

    /// <summary> IsLight = true </summary>
    Ultralight = 2,

    //ExtraLight = 2,

    /// <summary> IsLight = true </summary>
    Light = 3,

    /// <summary> Default font weight. IsNormalWeight = true  Also called Regular.</summary>
    Normal = 4,  

    //Regular    = 4,

    /// <summary> IsNormalWeight = true </summary>
    Medium = 5,
    
    /// <summary> IsBold = true </summary>
    Semibold = 6,

    //Demibold   = 6,
    //Demi       = 6,
    //Semi       = 6,
   
    /// <summary> IsBold = true </summary>
    Bold = 7,
    
    /// <summary> IsBold = true </summary>
    Ultrabold = 8,

    //ExtraBold  = 8,

    /// <summary> IsBold = true Also called Black</summary>
    Heavy      = 9

    //Black      = 9,
  }
  }
}

// line 2529: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_font.h
namespace Rhino.DocObjects
{
  partial class Font
  {
  /// <summary>
  /// Horizontal expansion or contraction of font
  /// </summary>
  public enum FontStretch : byte 
  {
    /// <summary> Not set. </summary>
    Unset = 0,
    /// <summary> </summary>
    Ultracondensed = 1,
    /// <summary> </summary>
    Extracondensed = 2,
    /// <summary> </summary>
    Condensed = 3,
    /// <summary> </summary>
    Semicondensed = 4,

    /// <summary> Default font stretch. </summary>
    Medium = 5,

    //Normal         = 5,

    /// <summary> </summary>
    Semiexpanded = 6,
    /// <summary> </summary>
    Expanded = 7,
    /// <summary> </summary>
    Extraexpanded = 8,
    /// <summary> </summary>
    Ultraexpanded = 9
  }
  }
}

// line 2587: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_font.h
namespace Rhino.DocObjects
{
  partial class Font
  {
  /// <summary>
  /// Vertical angle of font
  /// Upright, Italic, or Oblique
  /// </summary>
  public enum FontStyle : byte 
  {
    /// <summary> Not set. </summary>
    Unset = 0,

    /// <summary> Default font style. </summary>
    Upright = 1,

    //Normal = 1,
    //Roman = 1,

    /// <summary> 
    /// The face is sloped so the top is to the right of the base.
    /// Face names sometimes use the word "oblique" for italic faces.
    /// </summary>
    Italic = 2,

    /// <summary> 
    /// The face is sloped so the top is to the left of the base.
    /// This is extremely rare.
    /// NOTE WELL: Face names sometimes use the word "oblique" for italic faces.
    /// </summary>
    Oblique = 3
  }
  }
}

#endregion

#region opennurbs_model_component.h

// line 47: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_model_component.h
namespace Rhino.DocObjects
{
  ///<summary>
  ///The ON_ModelComponent::Type enum has a value for each explicit component type
  ///and two special values, Unset and Mixed. Use an ON_ModelComponentTypeIterator
  ///instance to iterate over the ON_ModelComponent::Type values.
  ///</summary>
  public enum ModelComponentType : byte 
  {
    ///<summary>No value set.</summary>
    Unset = 0,
    ///<summary>Embedded image (bitmap) components.</summary>
    Image = 1,
    ///<summary>Texture mapping.</summary>
    TextureMapping = 2,
    ///<summary>Render material.</summary>
    RenderMaterial = 3,
    ///<summary>Line pattern (linetype).</summary>
    LinePattern = 4,
    ///<summary>Layer.</summary>
    Layer = 5,       
    ///<summary>Group.</summary>
    Group = 6,
    ///<summary>Text style.</summary>
    TextStyle = 7,
    ///<summary>AnnotationDimension style.</summary>
    DimStyle = 8,
    ///<summary>Render light.</summary>
    RenderLight = 9,
    ///<summary>Hatch pattern.</summary>
    HatchPattern = 10,
    ///<summary>Instance definition.</summary>
    InstanceDefinition = 11,
    ///<summary>Model objects (points, curves, surfaces, ..., annotation, page details, ...), including objects referenced by instance definitions.</summary>
    ModelGeometry = 12,
    ///<summary>History record.</summary>
    HistoryRecord = 13,
    ///<summary>Multiple component types.
    /// Used when a component type filter must include all explicit component types.
    ///</summary>
    Mixed = 0xFE
  }
}

#endregion

#region opennurbs_string_value.h

// line 110: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_string_value.h
namespace Rhino
{
  partial class LengthValue
  {
  /// <summary>
  /// Formatting to apply when creating a length value from a double.
  /// </summary>
  public enum StringFormat : byte 
  {
    ///<summary>Use exact decimal string.</summary>
    ExactDecimal = 0,

    ///<summary>If possible, use exact integer-fraction format (1.125 becomes 1-1/8).</summary>
    ExactProperFraction = 1,

     ///<summary>If possible, use exact fraction format (1.125 becomes 9/8).</summary>
    ExactImproperFraction = 2,

    ///<summary>The value may be adjusted slightly to improve clarity (1.124999... becomes 1.125).</summary>
    CleanDecimal = 3, 

    ///<summary>The value may be adjusted slightly to improve clarity (1.124999... becomes 1-1/8).</summary>
    CleanProperFraction = 4,

    ///<summary>The value may be adjusted slightly to improve clarity (1.124999... becomes 9/8).</summary>
    CleanImproperFraction = 5
  }
  }
}

// line 466: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_string_value.h
namespace Rhino
{
  partial class ScaleValue
  {
  /// <summary>
  /// Specifies prefered formats for automatically
  /// created string descriptions of a scale value.
  /// </summary>
  public enum ScaleStringFormat : byte 
  {
    /// <summary>
    /// No preference for automatically created string descriptions of a scale value.
    /// </summary>
    None = 0,

    /// <summary>
    /// Prefer the ratio format using a colon, like "1:4" or "4:1".
    /// </summary>
    RatioFormat = 1,

    /// <summary>
    /// Prefer the equation format using an equal sign, like "1 = 4" or "4 = 1".
    /// </summary>
    EquationFormat = 2,

    /// <summary>
    /// Prefer the fraction format using a slash, like "1/4" or "4/1".
    /// </summary>
    FractionFormat = 3,

    /// <summary>
    /// ON_ScaleValue::ScaleStringFormat::Unset is used to indicate no preference is set.
    /// This condition is different from ON_ScaleValue::ScaleStringFormat::None.
    /// </summary>
    Unset = 0xFF
  }
  }
}

#endregion

#region opennurbs_subd.h
#if OPENNURBS_SUBD_WIP

// line 951: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_subd.h
namespace Rhino.Geometry
{
  partial class SubD
  {
  /// <summary>
  /// SubD::VertexTag identifies the type of subdivision vertex.  Different tags use
  /// different subdivision algorithms to determine where the subdivision point and
  /// limit point are located.  There are toplological constraints that restrict which
  /// tags can be assigned.
  /// </summary>
  public enum SubDVertexTag : byte 
  {
    ///<summary>
    /// Not a valid vertex tag and the default value for ON_SubDVertex::m_vertex_tag.
    /// This encourages developers to thoughtfully initialize ON_SubDVertex::m_vertex_tag.
    ///</summary>
    Unset = 0,

    ///<summary>
    /// Must be an interior vertex.
    /// All edges ending at a smooth vertex must be tagged as ON_SubD::EdgeTag::Smooth
    /// and have 2 faces. 
    ///</summary>
    Smooth = 1,

    ///<summary>
    /// Can be an interior or a boundary vertex.
    /// Exactly two edges ending at a crease vertex must be tagged as ON_SubD::EdgeTag::Crease and may
    /// have 1 or 2 faces. 
    /// All other edges ending at a crease must be tagged as tagON_SubD::EdgeTag::Smooth and have 2 faces.
    ///</summary>
    Crease = 2,

    ///<summary>
    /// Can be an interior, boundary, nonmanifold, or isolated vertex.
    /// The location of a corner vertex is fixed. 
    /// The all subdivision points and the limit point are at the initial vertex location.
    /// The edges ending at a corner vertex can be smooth or crease edges.
    ///</summary>
    Corner = 3,

    ///<summary>
    /// Must be an interior vertex.  
    /// Every edge ending at a dart vertex must have 2 faces.
    /// Exactly one edge ending at a dart vertex must be tagged as ON_SubD::EdgeTag::Crease
    /// and every otherr edge must be tagged as tagON_SubD::EdgeTag::smooth.
    ///</summary>
    Dart = 4
  }
  }
}

// line 1014: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_subd.h
namespace Rhino.Geometry
{
  partial class SubD
  {
  /// <summary>
  /// SubD::EdgeTag identifies the type of subdivision edge.  Different tags use
  /// different subdivision algorithms to determine where the subdivision point is located.
  /// </summary>  
  public enum SubDEdgeTag : byte 
  {
    ///<summary>
    /// Not a valid edge tag and the default value for ON_SubDEdge::m_edge_tag.
    /// This encourages developers to thoughtfully initialize ON_SubDEdge::m_edge_tag.
    ///</summary>
    Unset = 0,

    ///<summary>
    /// One or two of the edge's vertices must be tagged as ON_SubD::VertexTag::Smooth.
    /// The edge must have exactly two faces.
    ///</summary>
    Smooth = 1,

    ///<summary>
    /// Both of the edge's vertices must be tagged as not ON_SubD::VertexTag::Smooth.
    /// The edge can have any number of faces.
    ///</summary>
    Crease = 2,

    ///<summary>
    /// Reserved for version 2 of the ON_SubD project.
    /// Currently this tag is not used and is invalid.
    ///
    /// FUTURE: The edge is a "soft crease" or "semi-sharp".
    /// At lease one end vertex must be tagged as ON_SubD::VertexTag::Smooth
    /// The edge must have exactly two faces.
    /// The value of ON_SubDEdge::m_sharpness controls how
    /// soft/hard the edge appears.
    /// ON_SubDEdge::m_sharpness = 0 is identical to ON_SubD::EdgeTag::Smooth.
    /// ON_SubDEdge::m_sharpness = 1 is identical to ON_SubD::EdgeTag::Crease.
    ///</summary>
    Sharp = 3,
                 
    ///<summary>
    /// This tag appears only on edges that have exactly two neighboring faces
    /// and neither end vertex is tagged as ON_SubD::VertexTag::Smooth.
    /// The level 1 subdivision point for a level 0 edge tagged as ON_SubD::EdgeTag::X 
    /// is the standard smooth edge subdivision point.
    /// When subdivided, the new subdivision vertex will be tagged
    /// as ON_SubD::VertexTag::Smooth and the subdivided edges will
    /// be tagged as ON_SubD::EdgeTag::Smooth.  Thus, the tag ON_SubD::EdgeTag::X
    /// should only appear at level 0.
    /// This tag exists because the ON_SubD subdivision
    /// algorithm requires any edge with both end vertices
    /// tagged as not smooth must be subdivided at its midpoint.
    /// Sector iterators treat "X" edges as smooth.
    /// Both edge end weights must be set so the smooth
    /// subdivided edges will be valid.    
    ///</summary>
    X = 4
  }
  }
}

// line 1090: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_subd.h
namespace Rhino.Geometry
{
  partial class SubD
  {
  /// <summary>
  /// SubD::FacetType reports the default facet type for subdivision algorithms.
  /// </summary>  
  public enum SubDFacetType : byte 
  {
    ///<summary> Not a valid facet type. </summary>
    Unset = 0,

    ///<summary> Triangle </summary>
    Tri = 3,

    ///<summary> Quadrangle </summary>
    Quad = 4
  }
  }
}

// line 1127: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_subd.h
namespace Rhino.Geometry
{
  partial class SubD
  {

  ///<summary>Summarizes the number of edges in faces in the whole object.</summary>
  public enum VertexFacetType : byte 
  {
    ///<summary>Not a valid vertex face type.</summary>
    Unset = 0,

    ///<summary>All faces are triangular.</summary>
    Tri = 3,

    ///<summary>All faces are quads.</summary>
    Quad = 4,

    ///<summary>Edge count of faces is constant and &gt; 4.</summary>
    Ngon = 5,

    ///<summary>Edge count of faces is not constant.</summary>
    Mixed = 0xFF 
  }
  }
}

// line 1153: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_subd.h
namespace Rhino.Geometry
{
  partial class SubD
  {
  /// <summary>
  /// Subdivision algorithm.
  /// </summary>  
  public enum SubDType : byte 
  {
    ///<summary>
    /// Not a valid subdivision type.
    ///</summary>
    Unset = 0,

    ///<summary>
    /// Built-in Loop-Warren triangle with Bernstein-Levin-Zorin creases and darts.
    ///</summary>
    TriLoopWarren = 3,

    ///<summary>
    /// Built-in Catmull-Clark quad with Bernstein-Levin-Zorin creases and darts.
    ///</summary>
    QuadCatmullClark = 4,

    ///<summary>
    /// Custom triangle face algorithm. (Not built-in. Provided for use by 3rd party developers.)
    ///</summary>
    CustomTri = 5,
    
    ///<summary>
    /// Custom quad facet algorithm. (Not built-in. Provided for use by 3rd party developers.)
    ///</summary>
    CustomQuad = 6,

    ///<summary>
    /// Custom algorithm. (Not built-in. Provided for use by 3rd party developers.)
    ///</summary>
    Custom = 7

    // All values must be <= 15; i.e., (((unsigned char)0xF0U) & subd_type)) must be zero.
  }
  }
}

// line 2866: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_subd.h
namespace Rhino.Geometry
{
  partial class SubD
  {
  /// <summary>
  /// ON_SubD::NurbsSurfaceType specifies what type of NURBS surfaces are returned by ON_SubD.GetLimitSurfaceNurbs()
  /// </summary>
  public enum NurbsSurfaceType : byte 
  {
    ///<summary>
    /// Not a valid type. Used to indicate the type has not been set and to encourage developers to explicitly specify a type.
    /// When in doubt, specify NurbsSurfaceType::Large.
    ///</summary>
    Unset = 0,

    ///<summary>
    /// A single NURBS surface will be created for each SubD quad. Near extraordinary vertices, the surfaces may
    /// have lots of knots.
    ///</summary>
    Large = 1,

    ///<summary>
    /// NURBS surfaces will be as large as possible without the addition of extra knots. 
    /// Near extraordinary vertices, the surfaces may
    /// have lots of knots.
    /// This option is prefered when a user wants larger NURBS surfaces but not at the cost of addtional NURBS control points.
    ///</summary>
    Medium = 2,

    ///<summary>
    /// NURBS surfaces will not be merged and will have clamped knots.
    ///</summary>
    Small = 3,

    ///<summary>
    /// NURBS surfaces will not be merged and will have unclamped uniform knots.
    /// This is useful as a starting point for customized merging and modifying
    /// continuity at extraordinary vertices.
    ///</summary>
    Unprocessed = 4
  }
  }
}

// line 5063: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_subd.h
namespace Rhino.Geometry
{
  partial class SubD
  {
  internal enum PatchFragmentTypeXYX : byte 
  {
    ///<summary>Not a valid patch type.</summary>
    Unset = 0,

    ///<summary>This fragment is a single 4x4 bicubic span covering the entire SubD region identified by m_face_region.</summary>
    BicubicSingle = 1,

    ///<summary>The bispans in this fragment are quadrants of the SubD region identified by m_face_region.</summary>
    BicubicQuadrant = 4
  }
  }
}

// line 5077: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_subd.h
namespace Rhino.Geometry
{
  partial class SubD
  {
  internal enum FragmentBispanType : byte 
  {
    ///<summary>No bispan.</summary>
    None = 0,

    ///<summary>Entire region identified by m_face_region is an exact bicubic patch.</summary>
    Exact = 1,

    ///<summary>Entire region identified by m_face_region is approximately a bicubic patch.</summary>
    Approximate = 2
  }
  }
}

// line 7953: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_subd.h
namespace Rhino.Geometry
{
  partial class SubD
  {
  ///<summary>
  ///Defines how interior creases are treated.
  ///</summary>
  public enum InteriorCreaseOption : byte 
  {
    ///<summary>The interior creases option is not defined.</summary>
    Unset = 0,

    ///<summary>No interior creases.</summary>
    None = 1,

    ///<summary>An interior subd crease will appear along coincident
    ///mesh edges where the angle between coindident vertex
    ///normals &gt;= MinimumCreaseAngleRadians().</summary>
    AtMeshCrease = 2,

    ///<summary>An interior subd crease will appear all coincident mesh edges.
    ///Input mesh vertex normals are ignored.</summary>
    AtMeshEdge = 3
  }
  }
}

// line 8057: C:\dev\github\mcneelv6\rhino\src4\opennurbs\opennurbs_subd.h
namespace Rhino.Geometry
{
  partial class SubD
  {
  ///<summary>
  ///Defines how convex corners are treated.
  ///</summary>
  public enum ConvexCornerOption : byte 
  {
    ///<summary>The option is not set.</summary>
    Unset = 0,

    ///<summary>No convex coners.</summary>
    None = 1,

    ///<summary>A convext subd corner will appear at input mesh/ boundary vertices 
    /// where the corner angle &lt;= MaximumConvexCornerAngleRadians() and
    /// the number of edges the end at the vertex is &lt;= MaximumConvexCornerEdgeCount().
    ///</summary>
    AtMeshCorner = 2
  }
  }
}


// (#if OPENNURBS_SUBD_WIP)
#endif
#endregion

#region RhinoSdkUiWindowsPaintManager.h

// line 106: C:\dev\github\mcneelv6\rhino\src4\rhino4\SDK\inc\RhinoSdkUiWindowsPaintManager.h
namespace Rhino.UI
{
  partial class Fonts
  {
  /// <summary>
  /// Size for UI font.
  /// </summary>
  public enum Size : int {
    /// <summary>0.8 x Normal</summary>
    Small,
    /// <summary>1.0 x Normal</summary>
    Normal,
    /// <summary>1.2 x Normal</summary>
    Large,
    /// <summary>2.0 x Normal</summary>
    Title,
  }
  }
}

// line 122: C:\dev\github\mcneelv6\rhino\src4\rhino4\SDK\inc\RhinoSdkUiWindowsPaintManager.h
namespace Rhino.UI
{
  partial class Fonts
  {
  /// <summary>
  /// Style for UI font.
  /// </summary>
  public enum Style : int {
    /// <summary>Normal</summary>
    Regular = 0,
    /// <summary>Bold</summary>
    Bold = 1,
    /// <summary>Italic</summary>
    Italic = 2,
    /// <summary>Underline</summary>
    Underline = 4,
    /// <summary>Strikeout</summary>
    Strikeout = 8
  }
  }
}

#endregion

#region rh_appsettings.cpp

// line 2025: C:\dev\github\mcneelv6\rhino\src4\DotNetSDK\rhinocommon\c\rh_appsettings.cpp
namespace Rhino.ApplicationSettings
{

/// <summary>
/// Contains enumerated constant values to represent logical colors associated with elements of the user interface.
/// </summary>
/*MANUAL*/ public enum PaintColor  {
  /// <summary>Gradient start for active toolbar tab and non-client area of Rhino.</summary>
  NormalStart = 0,
  /// <summary>Gradient end for active toolbar tab and non-client area of Rhino.</summary>
  NormalEnd = 1,
  /// <summary>Edge color used for grippers, toolbar border, resize bars, status bar pane borders.</summary>
  NormalBorder = 2,
  /// <summary>Gradient start for inactive toolbar tab.</summary>
  HotStart = 3,
  /// <summary>Gradient end for inactive toolbar tab.</summary>
  HotEnd = 4,
  /// <summary>Inactive toolbar tab border.</summary>
  HotBorder = 5,
  /// <summary>Pressed gradient start.</summary>
  PressedStart = 6,
  /// <summary>Pressed gradient end.</summary>
  PressedEnd = 7,
  /// <summary>Pressed border.</summary>
  PressedBorder = 8,
  /// <summary>Toolbar tab text and status bar text.</summary>
  TextEnabled = 9,
  /// <summary>Disabled text color.</summary>
  TextDisabled = 10,
  /// <summary>Color for hovering gradient start.</summary>
  MouseOverControlStart = 11,
  /// <summary>Color for hovering gradient end.</summary>
  MouseOverControlEnd = 12,
  /// <summary>Color for hovering border.</summary>
  MouseOverControlBorder = 13,
  /// <summary>Active floating window non-client area</summary>
  ActiveCaption = 14,
  /// <summary>Inactive floating window non-client area</summary>
  InactiveCaption = 15,
  /// <summary>Background color of panels</summary>
  PanelBackground = 16,
  /// <summary>Active viewport title.</summary>
  ActiveViewportTitle = 17,
  /// <summary>Inactive viewport title.</summary>
  InactiveViewportTitle = 18,
}
}

// line 2235: C:\dev\github\mcneelv6\rhino\src4\DotNetSDK\rhinocommon\c\rh_appsettings.cpp
namespace Rhino.ApplicationSettings
{

/// <summary>
/// Contains enumerated constant values to represent logical colors associated with elements of the user interface.
/// </summary>
/*MANUAL*/ public enum WidgetColor  {
  /// <summary>The color of the mapping widget u-axis.</summary>
  UAxisColor = 0,
  /// <summary>The color of the mapping widget v-axis..</summary>
  VAxisColor = 1,
  /// <summary>The color of the mapping widget w-axis.</summary>
  WAxisColor = 2
}
}

#endregion

#region rh_displaypipeline.cpp

// line 1231: C:\dev\github\mcneelv6\rhino\src4\DotNetSDK\rhinocommon\c\rh_displaypipeline.cpp
namespace Rhino.Display
{
/// <summary>
/// Defines styles used for drawing points.
/// </summary>
/*MANUAL*/public enum PointStyle  
{
  /// <summary> Square </summary>
  Simple = 0,
  /// <summary> Square with white center </summary>
  ControlPoint = 1,
  /// <summary>
  /// Like a control point but includes vertical/horizontal crosshair lines.
  /// </summary>
  ActivePoint = 2,
  /// <summary> X shape </summary>
  X = 3,
  /// <summary> Circular </summary>
  RoundSimple = 4,
  /// <summary> Circular with white center </summary>
  RoundControlPoint = 5,
  /// <summary> Round control point with crosshair lines </summary>
  RoundActivePoint = 6,
  /// <summary> Circle or ring shape when secondarySize is set </summary>
  Circle = RoundSimple,
  /// <summary> Square or diamond shape when rotated </summary>
  Square = Simple,
  /// <summary> Triangular shape </summary>
  Triangle = 7,
  /// <summary> Heart shape </summary>
  Heart = 8,
  /// <summary> Chevron shape (two directional arrows) </summary>
  Chevron = 9,
  /// <summary> Three unioned circles </summary>
  Clover = 10,
  /// <summary> Tag shape </summary>
  Tag = 11,
  /// <summary> * shape </summary>
  Asterisk = 12,
  /// <summary> Map style pin symbol. secondarySize defines hole zie in pin </summary>
  Pin = 13,
  /// <summary>
  /// Arrow shape with tail as definition point. Shape is offset from tail by secondarySize.
  /// </summary>
  ArrowTail = 14,
  /// <summary>
  /// Arrow shape with tip as definition point. Shape is offset from tip by secondarySize.
  /// </summary>
  ArrowTip = 15
}
}

#endregion

#region RhinoSdkDialog.h

// line 195: C:\dev\github\mcneelv6\rhino\src4\rhino4\SDK\inc\RhinoSdkDialog.h
namespace Rhino.UI
{
	/// <summary>
	/// OnShowDockbar event type
	/// </summary>
	public enum ShowPanelReason : int 
	{
		/// <summary>
		/// Dock bar shown or made visible
		/// </summary>
		Show,
		/// <summary>
		/// Dock bar hidden, no longer visible
		/// </summary>
		Hide,
		/// <summary>
		/// Dock bar temporarily hidden because the main Rhino application is no
		/// longer active.
		/// </summary>
		HideOnDeactivate,
		/// <summary>
		/// Dock bar that was temporarily hidden when the main Rhino application
		/// was deactivated is now being shown.
		/// </summary>
		ShowOnDeactivate
	}
}

#endregion

#region RhinoFileEventWatcher.h

// line 3: C:\dev\github\mcneelv6\rhino\src4\rhino4\RhinoFileEventWatcher.h
namespace Rhino
{
/// <summary>
/// Passed to IRhinoFileEventWatcher::Changed when a change event is raised.
/// </summary>
public enum RhinoFileWatcherChangeReason  
{
  /// <summary>
  /// The creation of a file or folder.
  /// </summary>
  Created = 1,
  /// <summary>
  /// The deletion of a file or folder.
  /// </summary>
  Deleted = 2,
  //
  /// <summary>
  /// The change of a file or folder. The types of changes include: changes to size,
  /// attributes, security settings, last write, and last access time.
  /// </summary>
  Changed = 4,
  /// <summary>
  /// The renaming of a file or folder.
  /// </summary>
  Renamed
}
}

#endregion

#region rh_getpoint.cpp

// line 645: C:\dev\github\mcneelv6\rhino\src4\DotNetSDK\rhinocommon\c\rh_getpoint.cpp
namespace Rhino.UI
{
/// <summary>
/// Standard mouse cursors in Rhino
/// </summary>
/*MANUAL*/public enum CursorStyle  
{
  /// <summary></summary>
  Default = 0,
  /// <summary> Wait </summary>
  Wait = 1,
  /// <summary></summary>
  CrossHair = 2,
  /// <summary></summary>
  Hand = 3,
  /// <summary></summary>
  Rotate = 4,
  /// <summary></summary>
  Magnify = 5,
  /// <summary>arrow with +</summary>
  ArrowCopy = 6,
  /// <summary></summary>
  CrosshairCopy = 7
}
}

#endregion

#region rh_licensemanager.cpp

// line 44: C:\dev\github\mcneelv6\rhino\src4\DotNetSDK\rhinocommon\c\rh_licensemanager.cpp
namespace Rhino.Runtime
{
/// <summary>
/// Contains enumerated constant values to represent Rhino's Runtime Mode.
/// </summary>
public enum Mode  
{
  /// <summary>Running with a commercial, educational, or evaluation license ke</summary>
  NormalMode = 0,
  /// <summary>Running as a viewer</summary>
  ViewerMode,
  /// <summary>Running as a Beta product</summary>
  BetaMode,
  /// <summary>Invalid mode; this is an error condition</summary>
  InvalidMode = 100
}
}

#endregion

#region rhinoSdkMeshUtilities.h

// line 827: C:\dev\github\mcneelv6\rhino\src4\rhino4\Sdk\inc\rhinoSdkMeshUtilities.h
namespace Rhino.Geometry
{
///<summary>Enumerates methods to end a mesh pipe.</summary>
public enum MeshPipeCapStyle  {
  ///<summary>Capping is skipped. The resulting object will be simpler.</summary>
  None = 0,

  ///<summary>A flat surface will cap the pipe.</summary>
  Flat = 1,

  ///<summary>A simple construction will cap the pipe.</summary>
  Box = 2,

  ///<summary>A meridians-and-parallels hemisphere construction will cap the pipe.</summary>
  Dome = 3
}
}

// line 1548: C:\dev\github\mcneelv6\rhino\src4\rhino4\Sdk\inc\rhinoSdkMeshUtilities.h
namespace Rhino.Geometry
{
  /// <summary>
  /// Parameter mode for creating texture coordinates and surface parameters
  /// </summary>
  public enum MeshExtruderParameterMode : int 
  {
    /// <summary>
    /// Stretch parameters slightly on extruded faces to cover walls
    /// </summary>
    CoverWalls = 0,
    /// <summary>
    /// Keep parameters on extruded faces and stretch on walls
    /// </summary>
    KeepAndStretch = 1
  }
}

// line 1583: C:\dev\github\mcneelv6\rhino\src4\rhino4\Sdk\inc\rhinoSdkMeshUtilities.h
namespace Rhino.Geometry
{
  /// <summary>
  /// Defines how mesh extruder decides orients faces
  /// </summary>
  public enum MeshExtruderFaceDirectionMode : int 
  {
    /// <summary>
    /// Maintain all face directions
    /// </summary>
    Keep = 0
  }
}


#endregion

#region RhImportExportOptions.h

// line 69: C:\dev\github\mcneelv6\rhino\src4\rhino4\RhImportExportOptions.h
namespace Rhino.Runtime
{
/// <summary>
/// Standard CRhImportOptions sections to import
/// </summary>
public enum ImportOptionsSections  
{
  /// <summary>
  /// </summary>
  AdvancedDisplay = 0,
  /// <summary>
  /// </summary>
  Alias,
  /// <summary>
  /// </summary>
  Appearance,
  /// <summary>
  /// </summary>
  ChooseOneObject,
  /// <summary>
  /// </summary>
  ControlPointContextMenu,
  /// <summary>
  /// </summary>
  CursorToolTip,
  /// <summary>
  /// </summary>
  Display,
  /// <summary>
  /// </summary>
  File,
  /// <summary>
  /// </summary>
  General,
  /// <summary>
  /// </summary>
  Grid,
  /// <summary>
  /// </summary>
  ModelAid,
  /// <summary>
  /// </summary>
  Mouse,
  /// <summary>
  /// </summary>
  ObjectContextMenu,
  //OpenGL,
  //RenderMesh,
  /// <summary>
  /// </summary>
  SearchPath,
  /// <summary>
  /// </summary>
  ShortcutKey,
  /// <summary>
  /// </summary>
  Smarttrack,
  /// <summary>
  /// </summary>
  View,
  /// <summary>
  /// </summary>
  ViewportContextMenu,
  /// <summary>
  /// Must always be the last item
  /// </summary>
  Count
}
}

#endregion

#region RhinoSdkPages.h

// line 532: C:\dev\github\mcneelv6\rhino\src4\rhino4\SDK\inc\RhinoSdkPages.h
namespace Rhino.UI
{
/// <summary>
/// Standard IRhinoOptionsPageButton
/// </summary>
public enum OptionPageButtons : int 
{
  /// <summary>
  /// Don't display any of the standard buttons.
  /// </summary>
  None = 0x00000000,
  /// <summary>
  /// The "Restore Defaults" button located at the bottom of the host.
  /// </summary>
  DefaultButton = 0x00000001,
  /// <summary>
  /// The "Apply" button located at the bottom of the host.
  /// </summary>
  ApplyButton   = 0x00000002,
}
}

// line 909: C:\dev\github\mcneelv6\rhino\src4\rhino4\SDK\inc\RhinoSdkPages.h
namespace Rhino.UI
{
/// <summary>
/// IRhinoProperties page type
/// </summary>
public enum PropertyPageType : int 
{
  /// <summary>
  /// Replace the material page with this page; only works for the current render plug - in.
  /// </summary>
  Material = 0,
  /// <summary>
  /// Replace the light page with this page; only works for the current render plug-in.
  /// </summary>
  Light,
  /// <summary>
  /// User-defined custom object page.
  /// </summary>
  Custom,
  /// <summary>
  /// For internal use only.
  /// </summary>
  ObjectProperties,
  /// <summary>
  /// If page is provided by Rhino and only dimensions are selected, activate this page.
  /// </summary>
  Dimension,
  /// <summary>
  /// If page is provided by Rhino and leaders are selected, activate this page.
  /// </summary>
  Leader,
  /// <summary>
  /// If page is provided by Rhino and only text objects are selected, activate this page.
  /// </summary>
  Text,
  /// <summary>
  /// If page is provided by Rhino and only hatch objects are selected, activate this page.
  /// </summary>
  Hatch,
  /// <summary>
  /// If page is provided by Rhino and only dot objects are selected, activate this page.
  /// </summary>
  Dot,
  /// <summary>
  /// Replace the texture mapping page with this page; only works for the current render plug-in.
  /// </summary>
  TextureMapping,
  /// <summary>
  /// If page is provided by Rhino and only detail objects are selected, activate this page.
  /// </summary>
  Detail,
  /// <summary>
  /// If page is provided by Rhino and only clipping plane objects are selected, activate this page.
  /// </summary>
  ClippingPlane,
  /// <summary>
  /// If page is provided by Rhino and only named view widget objects are selected, activate this page.
  /// </summary>
  NamedView,
  /// <summary>
  /// Decals user interface
  /// </summary>
  Decal,
  /// <summary>
  ///  Page is a view properties page and uses view properties methods. Does not use object properties methods.
  /// </summary>
  View,
  /// <summary>
  ///  Reserved, do not use.
  /// </summary>
  PageCount,
}
}

#endregion

#region rhinoPlotWidth.h

// line 4: C:\dev\github\mcneelv6\rhino\src4\rhino4\rhinoPlotWidth.h
namespace Rhino.UI
{
/// <summary>
/// Supported plot width special types
/// </summary>
public enum RhinoPlotWidthType : int 
{
  /// <summary>
  /// Plot width from layer
  /// </summary>
  ByLayer,
  /// <summary>
  /// Plot width from parent object
  /// </summary>
  ByParent,
  /// <summary>
  /// System hairline plot width
  /// </summary>
  Hairline,
  /// <summary>
  /// Use default plot width
  /// </summary>
  Default,
  /// <summary>
  /// Don't print
  /// </summary>
  None,
  /// <summary>
  /// Multiple objects selected with different types/widths
  /// </summary>
  Varies,
  /// <summary>
  /// Standard or custom width
  /// </summary>
  Width,
}
}

// line 43: C:\dev\github\mcneelv6\rhino\src4\rhino4\rhinoPlotWidth.h
namespace Rhino.UI
{
/// <summary>
/// Default width values used by UI objects to represent different states
/// </summary>
public enum RhinoPlotWidthValue : int 
{
  /// <summary>
  /// Use default plot width
  /// </summary>
  Default  =   0, // Needs to match the value CRhinoUiComboBox::print_width_options::default_width,
  /// <summary>
  /// Don't print
  /// </summary>
  None     =  -1, // Needs to match the value CRhinoUiComboBox::print_width_options::no_print_width,
  /// <summary>
  /// Plot width from layer
  /// </summary>
  ByLayer  = -10, // Needs to match the value CRhinoUiComboBox::print_width_options::by_layer_width,
  /// <summary>
  /// Plot width from parent object
  /// </summary>
  ByParent = -15, // Needs to match the value CRhinoUiComboBox::print_width_options::by_parent_width,
  /// <summary>
  /// Multiple objects selected with different types/widths
  /// </summary>
  Varies   = -20,
}
}

// line 73: C:\dev\github\mcneelv6\rhino\src4\rhino4\rhinoPlotWidth.h
namespace Rhino.UI
{
/// <summary>
/// Argument flags passed to methods used to get Rhino plot width lists
/// </summary>
public enum RhinoGetPlotWidthArgs : int 
{
  /// <summary>
  /// Just get the standard or default width list
  /// </summary>
  NoArgs = 0,
  /// <summary>
  /// Include a By Layer option
  /// </summary>
  ByLayer = 1,
  /// <summary>
  /// Include a By Parent option
  /// </summary>
  ByParent = 2,
  /// <summary>
  /// Include a hairline width option
  /// </summary>
  HairLine = 4,
  /// <summary>
  /// Include a default width option
  /// </summary>
  Default = 8,
  /// <summary>
  /// Include a no print option
  /// </summary>
  None = 0x20,
  /// <summary>
  /// Include everything
  /// </summary>
  All = 0xFFFFFFF
}
}

#endregion

